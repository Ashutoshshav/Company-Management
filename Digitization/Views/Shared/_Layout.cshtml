<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="utf-8" />
	<meta name="viewport" content="width=device-width, initial-scale=1.0" />
	<title>@ViewData["Title"] - Digitization</title>
	<link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
	<link rel="stylesheet" href="~/Digitization.styles.css" asp-append-version="true" />
	<link rel="stylesheet" href="~/lib/tailwindcss/tailwind.css" asp-append-version="true" />
	<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css" integrity="sha512-Kc323vGBEqzTmouAECnVceyQqyqdsSiqLQISBL29aUW4U/M7pSPA/gEUZQqv1cwx4OnYxTxve5UMg5GT6L4JJg==" crossorigin="anonymous" referrerpolicy="no-referrer" />
	<link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@24,400,0,0&icon_names=home" />
	<script src="https://cdn.tailwindcss.com"></script>
	<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
	<script src="https://cdn.jsdelivr.net/npm/jwt-decode/build/jwt-decode.min.js"></script>
	<style>
		.animate-fadeIn {
			animation: fadeIn 0.3s ease-out;
		}
	</style>
</head>
<body>
	@using System.IdentityModel.Tokens.Jwt;
	@using System.Security.Claims;
	@using System.Text.Json;
	@using System.IdentityModel.Tokens.Jwt;
	@using System.Security.Claims;
	@using System.Text.Json;

	@{
		var token = Context.Request.Cookies["Token"];
		var userRole = "";
		var username = "";
		string[] permits = new string[0]; // Initialize as an empty array

		if (!string.IsNullOrEmpty(token))
		{
			var handler = new JwtSecurityTokenHandler();
			var jwtToken = handler.ReadJwtToken(token);

			var IDClaim = jwtToken.Claims.FirstOrDefault(c => c.Type == "sub");
			var roleClaim = jwtToken.Claims.FirstOrDefault(c => c.Type == "Role");

			// 🔹 Retrieve **all** Permit claims, not just the first one
			var permitClaims = jwtToken.Claims.Where(c => c.Type == "Permit").Select(c => c.Value).ToArray();

			if (permitClaims.Length > 0)
			{
				try
				{
					// ✅ Attempt to parse JSON array format
					permits = JsonSerializer.Deserialize<string[]>(JsonSerializer.Serialize(permitClaims));
				}
				catch
				{
					// 🔹 If deserialization fails, assume comma-separated string
					permits = string.Join(",", permitClaims).Split(',')
					.Select(p => p.Trim())
					.ToArray();
				}
			}

			username = IDClaim?.Value;
			userRole = roleClaim?.Value;
		}
	}
	<span class="hidden">DIGITIZATION_WEB -v0.2</span>
	<div class="">
		<!-- Navigation Bar -->
		<header>
			<nav class="fixed left-0 top-0 z-50 flex w-full items-center justify-between overflow-hidden bg-[#31708F] px-4 py-0 shadow-md">
				<!-- Logo Section -->
				<div class="flex items-center">
					@* <button id="toggleSidebar" class="mr-4 text-xl text-white focus:outline-none">
						<i class="fa-solid fa-bars"></i>
					</button> *@
					<a class="flex items-center" asp-area="" asp-controller="Home" asp-action="Index">
						<img src="~/images/vislogo.png" class="brightness-0 h-16 contrast-200 invert filter" asp-controller="Home" asp-action="Index" />
					</a>
				</div>
				<div class="flex items-center">
					<button id="confirmActionButton" class="mr-4 hidden font-medium text-white hover:text-gray-200">Time Out</button>
					<span class="text-xl font-semibold text-white" id="username"></span>
					<i id="reminder" class="fa-solid fa-hourglass-end fa-shake ml-8 hidden text-xl text-white"></i>
				</div>
			</nav>
		</header>

		<div class="fixed left-0 top-16 z-50 w-full bg-white shadow-lg">
			<!-- Hamburger Menu Button -->
			<div class="flex items-center justify-between bg-[#26556D] px-4 py-2 text-white sm:hidden">
				<span class="text-lg font-semibold">Menu</span>
				<button id="menuToggle" class="focus:outline-none focus:ring-2 focus:ring-gray-400">
					<svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16m-7 6h7"></path>
					</svg>
				</button>
			</div>

			<nav class="z-50 w-full text-white">
				<div class="mx-auto w-full">
					<div class="flex w-full">
						<!-- Navigation Menu -->
						<ul id="navMenu" class="hidden w-full bg-[#26556D] sm:flex">
							@if (username != null && token != null)
							{
								<li class="flex-1 text-center">
									<a asp-controller="Home" asp-action="Index" class="block py-1.5 text-base font-semibold transition hover:bg-[#3A89AC]">
										Home
									</a>
								</li>

								<!-- Accounts Dropdown -->
								<li class="flex-1 relative text-center">
									<a class="nav-item-toggle block cursor-pointer py-1.5 hover:bg-[#3A89AC]"><span class="text-base font-semibold text-white">Accounts</span></a>
									<ul class="-translate-x-1/2 submenu z-10 group-hover:block absolute left-1/2 hidden w-full transform rounded-b-md bg-[#26556D] text-white shadow-lg">
										@if (permits.Contains("ReadEmpExpList"))
										{
											<li><a asp-controller="Management" asp-action="EmployeesExpenseList" class="block rounded-b-md px-4 py-2 hover:bg-[#3A89AC]">TADA</a></li>
										}
									</ul>
								</li>

								<!-- HR Admin Dropdown -->
								<li class="flex-1 relative text-center">
									<a class="nav-item-toggle block cursor-pointer py-1.5 hover:bg-[#3A89AC]"><span class="text-base font-semibold text-white">HR Admin</span></a>
									<ul class="-translate-x-1/2 submenu group-hover:block z-10 absolute left-1/2 hidden w-full transform rounded-b-md bg-[#26556D] text-white shadow-lg">
										@if (permits.Contains("ReadEmpAttendance"))
										{
											<li><a asp-controller="Management" asp-action="UpdateDailyEmployeeEntry" class="block px-4 py-2 hover:bg-[#3A89AC]">Attendance</a></li>
										}
										@if (permits.Contains("MngUserAuthorize"))
										{
											<li><a asp-controller="Permissions" asp-action="ManagePermissions" class="block px-4 py-2 hover:bg-[#3A89AC]">User Permissions</a></li>
										}
										<li><a asp-controller="" asp-action="" class="block rounded-b-md px-4 py-2 hover:bg-[#3A89AC]">Add Users</a></li>
									</ul>
								</li>

								<!-- Management Dropdown -->
								<li class="flex-1 relative text-center">
									<a class="nav-item-toggle block cursor-pointer py-1.5 hover:bg-[#3A89AC]"><span class="text-base font-semibold text-white">Management</span></a>
									<ul class="-translate-x-1/2 submenu group-hover:block z-10 absolute left-1/2 hidden w-full transform rounded-b-md bg-[#26556D] text-white shadow-lg">
										<li><a asp-controller="Management" asp-action="PaymentApprovalList" class="block px-4 py-2 hover:bg-[#3A89AC]">Approvals</a></li>
										@if (permits.Contains("ReadProjectsData"))
										{
											<li><a asp-controller="Project" asp-action="Index" class="block px-4 py-2 hover:bg-[#3A89AC]">Projects</a></li>
										}
										<li><a asp-controller="" asp-action="" class="block rounded-b-md px-4 py-2 hover:bg-[#3A89AC]">Add Users</a></li>
									</ul>
								</li>

								<!-- Other Dropdowns -->
								@* <li class="flex-1 relative text-center">
									<a class="nav-item-toggle block cursor-pointer py-1.5 hover:bg-[#3A89AC]">
										<span class="text-base font-semibold text-white">Purchase</span>
									</a>
									<ul class="-translate-x-1/2 z-10 submenu group-hover:block absolute left-1/2 hidden w-full transform rounded-b-md bg-[#26556D] text-white shadow-lg">
										<li><a asp-controller="" asp-action="" class="block rounded-b-md px-4 py-2 hover:bg-[#3A89AC]">Add Party</a></li>
									</ul>
								</li> *@

								<li class="flex-1 relative text-center">
									<a class="nav-item-toggle block cursor-pointer py-1.5 hover:bg-[#3A89AC]">
										<span class="text-base font-semibold text-white">Store & Purchase</span>
									</a>
									<ul class="-translate-x-1/2 z-10 submenu group-hover:block absolute left-1/2 hidden w-full transform rounded-b-md bg-[#26556D] text-white shadow-lg">
										<li><a asp-controller="Challan" asp-action="generateChallan" class="block px-4 py-2 hover:bg-[#3A89AC]">Challan</a></li>
										<li><a asp-controller="PO" asp-action="GeneratePO" class="block px-4 py-2 hover:bg-[#3A89AC]">PO</a></li>
										@if (permits.Contains("ReadMaterialCost"))
										{
											<li><a asp-controller="Expense" asp-action="Index" class="block rounded-b-md px-4 py-2 hover:bg-[#3A89AC]">Material Cost</a></li>
										}
									</ul>
								</li>

								<li class="flex-1 relative text-center">
									<a class="nav-item-toggle block cursor-pointer py-1.5 hover:bg-[#3A89AC]">
										<span class="text-base font-semibold text-white">Production</span>
									</a>
									@* <ul class="-translate-x-1/2 z-10 submenu group-hover:block absolute left-1/2 hidden w-full transform rounded-b-md bg-[#26556D] text-white shadow-lg">
										<li><a asp-controller="Management" asp-action="EmployeesExpenseList" class="block rounded-b-md px-4 py-2 hover:bg-[#3A89AC]">Add Party</a></li>
									</ul> *@
								</li>

								<li class="flex-1 relative text-center">
									<a class="nav-item-toggle block cursor-pointer py-1.5 hover:bg-[#3A89AC]">
										<span class="text-base font-semibold text-white">Execution</span>
									</a>
									<ul class="-translate-x-1/2 z-10 submenu group-hover:block absolute left-1/2 hidden w-full transform rounded-b-md bg-[#26556D] text-white shadow-lg">
										@* <li><a asp-controller="" asp-action="" class="block px-4 py-2 hover:bg-[#3A89AC]">Site Report</a></li> *@
										<li><a asp-controller="" asp-action="" class="block rounded-b-md px-4 py-2 hover:bg-[#3A89AC]">MOM</a></li>
									</ul>
								</li>

								<li class="flex-1 relative text-center">
									<a class="nav-item-toggle block cursor-pointer py-1.5 hover:bg-[#3A89AC]">
										<span class="text-base font-semibold text-white">Sales</span>
									</a>
									<ul class="-translate-x-1/2 z-10 submenu group-hover:block absolute left-1/2 hidden w-full transform rounded-b-md bg-[#26556D] text-white shadow-lg">
										<li><a asp-controller="Proposal" asp-action="Index" class="block px-4 py-2 hover:bg-[#3A89AC]">Offer</a></li>
										<li><a asp-controller="Challan" asp-action="partyDetails" class="block rounded-b-md px-4 py-2 hover:bg-[#3A89AC]">Add Party</a></li>
									</ul>
								</li>

								<!-- Time Out & Logout -->
								@* <li class="flex-1 hidden text-center">
									<span class="block cursor-pointer py-1.5 text-base font-semibold hover:bg-[#3A89AC]">
										Time Out
									</span>
								</li> *@
								<li class="flex-1 text-center">
									<span id="logout" class="block cursor-pointer py-1.5 text-base font-semibold hover:bg-[#3A89AC]">
										Logout
									</span>
								</li>
							}
							else
							{
								<li class="flex-1 text-center">
									<a class="block cursor-pointer py-1.5 text-base font-semibold hover:bg-[#3A89AC]"><span class="text-white">Login</span></a>
								</li>
							}
						</ul>
					</div>
				</div>
			</nav>
		</div>

		<!-- Add margin or padding to the body content below the nav -->
	</div>

	<main role="main" class="mt-24" >
		@RenderBody()
	</main>

	<!-- Modal for Password Confirmation -->
	<div id="passwordModal"
		 class="fixed inset-0 z-50 flex hidden items-center justify-center bg-gray-600 bg-opacity-50">
		<div class="w-full max-w-md rounded-lg bg-white p-6 shadow-md sm:w-3/4 lg:w-1/3">
			<h2 class="mb-4 text-lg font-bold text-gray-800 sm:text-xl">
				Confirm Action
			</h2>
			<label for="confirmPassword"
				   class="block text-sm font-medium text-gray-700">
				Enter your password to confirm:
			</label>
			<input type="password" id="confirmPassword"
				   class="mt-1 block w-full rounded-md border border-gray-300 p-2 focus:border-blue-500 focus:outline-none focus:ring focus:ring-blue-200"
				   placeholder="Enter password" />
			<span id="errorMessage"
				  class="mt-2 hidden text-sm text-red-500">
				Incorrect password. Please try again.
			</span>
			<div class="mt-4 flex justify-between">
				<button type="button" id="cancelButton"
						class="rounded-md bg-gray-300 px-4 py-2 text-gray-800 transition hover:bg-gray-400">
					Cancel
				</button>
				<button type="button" id="confirmButton"
						class="customBlue customBlue2Hover rounded-md px-4 py-2 text-white transition">
					Confirm
				</button>
			</div>
		</div>
	</div>

	<!-- Popup Modal -->
	<div id="jobCategoryPopup" class="fixed inset-0 flex hidden items-center justify-center bg-black bg-opacity-50 backdrop-blur-sm">
		<div class="animate-fadeIn w-96 scale-95 transform rounded-2xl bg-white p-6 shadow-2xl transition-all">
			<h2 class="mb-4 text-2xl font-semibold text-gray-900">Mark Your Presence</h2>
			<p class="mb-5 text-sm text-gray-600">Please Select Your Attendance Type.</p>

			<!-- Job Category Dropdown -->
			<div id="jobCategoryDropdown" class="relative w-full">
				<label for="jobCategory" class="-translate-y-1/2 absolute left-3 top-1/2 text-gray-500">
					<i class="fa-solid fa-hourglass-end fa-shake"></i>
				</label>
				<select id="jobCategory" class="w-full appearance-none rounded-lg border border-gray-300 bg-gray-100 py-2 pl-10 pr-3 text-gray-700 outline-none focus:border-blue-500 focus:ring-1 focus:ring-blue-500">
					<option value="" disabled selected>Select Job Type</option>
				</select>
			</div>

			<!-- Action Buttons -->
			<div class="mt-6 flex justify-center gap-3">
				<button id="closePopup" class="w-1/2 rounded-lg bg-gray-300 py-2 text-gray-700 transition-all duration-200 hover:bg-gray-400">
					Cancel
				</button>
			</div>
		</div>
	</div>

	<script src="~/lib/jquery/dist/jquery.min.js"></script>
	<script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
	<script src="~/js/site.js" asp-append-version="true"></script>
	@await RenderSectionAsync("Scripts", required: false)

	<script>
		if ("@token") {
			console.log("@username");
			console.log("@userRole");
			if("@username") {
				// Set username in UI
				document.getElementById("username").innerText = "@username";

				// Logout functionality
				document.getElementById("logout").addEventListener("click", () => {
					document.cookie = "Token=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;";
					window.location.href = '/Auth/Login';
				});
			}
		}

		document.getElementById("menuToggle").addEventListener("click", function() {
			document.getElementById("navMenu").classList.toggle("hidden");
		});

		// Close dropdowns when clicking outside
		document.addEventListener("click", function (event) {
			if (!event.target.closest(".nav-item")) {
				document.querySelectorAll("ul[id$='Dropdown']").forEach((dropdown) => {
					dropdown.classList.add("hidden");
				});
				document.body.style.overflow = ""; // Re-enable scrolling
			}
		});

		document.addEventListener("DOMContentLoaded", function () {
			document.querySelectorAll(".nav-item-toggle").forEach(item => {
				item.addEventListener("click", function (e) {
					e.stopPropagation(); // Prevents event from bubbling up

					// Close other open submenus
					document.querySelectorAll(".submenu").forEach(menu => {
						if (menu !== this.nextElementSibling) {
							menu.classList.add("hidden");
						}
					});

					// Toggle the clicked submenu
					let submenu = this.nextElementSibling;
					if (submenu) {
						submenu.classList.toggle("hidden");
					}
				});
			});

			// Close all submenus when clicking outsideij
			document.addEventListener("click", function () {
				document.querySelectorAll(".submenu").forEach(menu => {
					menu.classList.add("hidden");
				});
			});

			// Prevent closing when clicking inside the submenu
			document.querySelectorAll(".submenu").forEach(submenu => {
				submenu.addEventListener("click", function (e) {
					e.stopPropagation(); // Prevents event from closing submenu when clicking inside it
				});
			});
		});

		if("@token"){
			fetch('/Home/checkEmployeeLogSts')
				.then(response => {
					if (!response.ok) {
						throw new Error('Failed to fetch job categories');
					}
					return response.json();
				})
				.then(data => {
					console.log(data);
					if(data == "LoggedIn") {
						let timeOut = document.getElementById('confirmActionButton');

						timeOut.classList.remove('hidden');
						// Open the modal when the confirm button is clicked
						document.getElementById('confirmActionButton').addEventListener('click', function () {
							document.getElementById('passwordModal').classList.remove('hidden');
						});

						// Close the modal when the cancel button is clicked
						document.getElementById('cancelButton').addEventListener('click', function () {
							document.getElementById('passwordModal').classList.add('hidden');
						});

						// Handle the confirm action
						document.getElementById('confirmButton').addEventListener('click', function () {
							var password = document.getElementById('confirmPassword').value;
							var errorMessage = document.getElementById('errorMessage');

							// Send password to the server using fetch (AJAX)
							fetch('@Url.Action("ConfirmPassword", "Home")', {
								method: 'POST',
								headers: {
									'Content-Type': 'application/json',
								},
								body: JSON.stringify({ password: password })
							})
							.then(response => response.json())
							.then(data => {
								if (data.success) {

									fetch('/Home/DailyEmployeeTimeOut')
									.then(response => {
										if (!response.ok) {
											throw new Error('Failed to fetch job categories');
										}
										// Close the modal and show success message
										document.getElementById('passwordModal').classList.add('hidden');
										console.log("LoggedOut");

										return location.reload();
									})
									.catch(error => console.error('Error:', error));
									// alert('Action confirmed!');
									// Proceed with your action (e.g., delete, submit form)
								} else {
									// Show error message
									errorMessage.classList.remove('hidden');
								}
							})
							.catch(error => {
								alert('Something went wrong. Please try again.');
							});
						});
					} else if(data == "LoggedOut") {
						let timeOut = document.getElementById('confirmActionButton');

						timeOut.classList.add('hidden');
					} else {
						// Fetch job categories from the API and populate the select list
						let jobCategoryDropdown = document.getElementById('jobCategoryDropdown')
						let reminder = document.getElementById('reminder')
						document.getElementById('jobCategoryPopup').classList.remove('hidden');

						jobCategoryDropdown.classList.remove('hidden');
						reminder.classList.remove('hidden');
						fetch('/Home/GetAllAttendanceType')
							.then(response => {
								if (!response.ok) {
									throw new Error('Failed to fetch job categories');
								}
								return response.json();
							})
							.then(data => {
										const selectElement = document.getElementById('jobCategory');
										console.log(data)
										// Dynamically populate the select element
										data.forEach(jobCategory => {
											const option = document.createElement('option');
											option.value = jobCategory.recordID; // Use job category ID as value
											option.textContent = jobCategory.inEntryText; // Use job category name as display text
											selectElement.appendChild(option);
										});
							})
							.catch(error => console.error('Error:', error));

							// Event listener to display the selected category
							const selectElement = document.getElementById('jobCategory');
							// const selectedCategoryElement = document.getElementById('selectedCategory');

							selectElement.addEventListener('change', () => {
								const selectedOption = selectElement.options[selectElement.selectedIndex];
								// selectedCategoryElement.textContent = selectedOption.textContent;
								let selectedText = selectedOption.textContent;
								let selectedID = selectedOption.value;

								fetch('/Home/EnterDailyEmployeeEntry', {
									  method: 'POST',
									  headers: { 'Content-Type': 'application/json' },
									  body: JSON.stringify({
										RecordID: selectedID,
										InEntryText: selectedText,
									  })
								})
								.then(response => {
									if (!response.ok) {
									  throw new Error('Network response was not ok');
									}
									return response.json();
								})
								.then(data => {
									console.log('Success:', data);
									location.reload();
									// jobCategoryDropdown.classList.add('hidden');

									// let timeOut = document.getElementById('confirmActionButton');

									// timeOut.classList.remove('hidden');
								})
								.catch(error => {
									console.error('Error:', error);
								});

								console.log(selectedOption);
								console.log(selectedID);
								console.log(selectedText);
							});
					}
				})
				.catch(error => console.error("Error:", error));
		}

		// Handle closing the popup
		document.getElementById('closePopup').addEventListener('click', function () {
			document.getElementById('jobCategoryPopup').classList.add('hidden');
		});
	</script>
</body>
</html>
