@{
	ViewData["Title"] = "Home Page";
}

<div class="">
	<div class="flex flex-col lg:flex-row">
		<!-- Left Sidebar -->
		<div class="mt-1 flex h-full w-full flex-col space-y-0.5 lg:w-1/4">
			<!-- My Tasks Section -->
			<div class="min-h-[40vh] rounded-lg border border-gray-300 bg-white">
				<!-- Header -->
				<div class="flex items-center justify-between rounded-t-lg border-b bg-[#26556D] px-5 py-1 font-semibold text-white">
					<h1 class="text-md">My Tasks</h1>
					<span class="cursor-pointer text-xl font-bold hover:text-gray-300">+</span>
				</div>

				<!-- Task Tabs -->
				<div class="flex border-b border-gray-400">
					<button id="btnActive" class="w-1/2 border-r border-gray-300 bg-[#2582b0] px-6 py-1.5 font-medium text-white transition hover:bg-[#1f6b91]">Active Tasks</button>
					<button id="btnPending" class="w-1/2 bg-[#2582b0] px-6 py-1.5 font-medium text-white transition hover:bg-[#1f6b91]">Pending Tasks</button>
				</div>

				<!-- Task List -->
				<div id="taskContainer" class="max-h-80 overflow-y-auto pt-0.5">
					<!-- Active Tasks Table -->
					<table id="activeTasks" class="w-full rounded-lg text-sm">
						<thead class="sticky top-0 border border-gray-300 bg-[#2582b0] text-white">
							<tr>
								<th class="border border-gray-300 p-2 text-center">Task</th>
								<th class="border border-gray-300 p-2 text-center">Deadline</th>
							</tr>
						</thead>
						<tbody class="bg-white"></tbody>
					</table>

					<!-- Pending Tasks Table -->
					<table id="pendingTasks" class="hidden w-full rounded-lg border border-gray-300 text-sm shadow">
						<thead class="sticky top-0 border border-gray-300 bg-[#2582b0] text-white">
							<tr>
								<th class="border border-gray-300 p-2 text-center">Task</th>
								<th class="border border-gray-300 p-2 text-center">Deadline</th>
							</tr>
						</thead>
						<tbody class="bg-white"></tbody>
					</table>
				</div>
			</div>

			<!-- Claims Section -->
			<div class="min-h-[50vh] rounded-lg border border-gray-300 bg-white">
				<!-- Header -->
				<div class="flex items-center justify-between rounded-t-lg border-b bg-[#26556D] px-5 py-1 font-semibold text-white">
					<h1 class="text-md">Claims</h1>
					<div class="text-md flex space-x-4">
						<a asp-controller="Expense" asp-action="CreateTravelExpenses" class="hover:text-gray-300">TADA</a>
						<a asp-controller="Expense" asp-action="CreateOtherExpenses" class="hover:text-gray-300">TADA (MISC)</a>
					</div>
				</div>

				<!-- Claims Table -->
				<div class="max-h-80 overflow-y-auto">
					<table class="w-full rounded-lg border border-gray-300 text-sm">
						<thead class="sticky top-0 border border-gray-300 bg-[#2582b0] text-white">
							<tr>
								<th class="border border-gray-300 p-2 text-center">Type</th>
								<th class="border border-gray-300 p-2 text-center">Amount</th>
								<th class="border border-gray-300 p-2 text-center">Status</th>
							</tr>
						</thead>
						<tbody id="claimTable" class="divide-y divide-gray-200 bg-white"></tbody>
					</table>
				</div>
			</div>
		</div>

		<!-- Middle Section (Main Content) -->
		<div class="mt-1 w-full lg:w-2/4">
			<div class="flex flex-col justify-around gap-8 rounded-lg bg-white px-4 py-2 md:flex-row">
				<div class="small-box flex flex-col items-center">
					<p class="font-semibold text-gray-700">Attendance</p>
					<div class="h-60">
						<canvas id="attendanceChart"></canvas>
					</div>
				</div>
				<div class="small-box flex flex-col items-center">
					<p class="font-semibold text-gray-700">Work Duration</p>
					<div class="h-60">
						<canvas id="pieChart1"></canvas>
					</div>
				</div>
			</div>

			<div class="mx-auto min-h-[50vh] w-full bg-white px-1">
				<h2 class="text-md flex justify-between rounded-t-lg bg-[#26556D] px-4 py-1.5 font-semibold text-white">
					<span id="monthYear"></span>
				</h2>

				<div class="overflow-x-auto">
					<table id="scheduleTable" class="w-full rounded-lg border border-gray-300 text-xs">
						<thead class="sticky top-0 bg-gradient-to-r from-[#2582b0] to-[#1b5f89] text-white shadow-md">
							<tr class="border border-gray-400 text-sm font-medium">
								<th class="border border-gray-400 px-4 py-2 text-center">Project/Day</th>
							</tr>
						</thead>
						<tbody class="divide-y divide-gray-300 bg-white">
							<!-- Dynamic Rows -->
						</tbody>
					</table>
				</div>
			</div>
		</div>

		<div class="mt-1 lg:w-1/4">
			<div class="overflow-hidden rounded-lg border border-gray-300">
				<!-- Header Section -->
				<div class="flex items-center justify-between rounded-t-lg border-b bg-[#26556D] px-4 py-1 font-semibold text-white">
					<h1 class="text-md">Performance</h1>
				</div>

				<!-- Scrollable Chart Container -->
				<div class="w-full overflow-x-auto" style="height: 36vh;">
					<canvas id="performanceChart" class="w-full" style=""></canvas>
				</div>
			</div>
		</div>
	</div>
</div>

<script>
	document.addEventListener("DOMContentLoaded", function () {
		fetch('/Home/ChartData')
			.then(response => response.json())
			.then(data => {
				let tasks = data.tasks;
				// console.log(tasks);
				const activeTableBody = document.querySelector("#activeTasks tbody");
				const pendingTableBody = document.querySelector("#pendingTasks tbody");

				if(tasks.length != 0){
					tasks.forEach((task) => {
						const row = `<tr class="text-sm">
										<td class="border px-2 py-1">${task.employeeWork}</td>
										<td class="border px-2 py-1 text-center">${task.deadline}</td>
									</tr>`;

						if (task.workCategory === 1) {
							activeTableBody.innerHTML += row;
						} else if (task.workCategory === 2) {
							pendingTableBody.innerHTML += row;
						}
					});

					// Button click event to switch tables
					document.getElementById("btnActive").addEventListener("click", () => {
						document.getElementById("activeTasks").classList.remove("hidden");

						document.getElementById("btnActive").classList.remove("bg-[#26556D]");

						document.getElementById("pendingTasks").classList.add("hidden");
						document.getElementById("btnPending").classList.add("bg-[#26556D]");
					});

					document.getElementById("btnPending").addEventListener("click", () => {
						document.getElementById("pendingTasks").classList.remove("hidden");

						document.getElementById("btnPending").classList.remove("bg-[#26556D]");

						document.getElementById("activeTasks").classList.add("hidden");

						document.getElementById("btnActive").classList.add("bg-[#26556D]");
					});
				} else {
					const row = `<tr class="text-center text-sm">You have no Task</tr>`;
					activeTableBody.innerHTML += row;
				}

				const claimTable = document.getElementById("claimTable");
				claimTable.innerHTML = "";

				data.paymentApprovalList.forEach((item, index) => {
					const row = `
						<tr class="${index % 2 === 0 ? 'bg-gray-100' : 'bg-white'}">
							<td class="border px-4 py-2 text-center">${item.expenseType}</td>
							<td class="border px-4 py-2 text-center">${item.amount}</td>
							<td class="border px-4 py-2 text-center">${item.approvalStatus ? item.approvalStatus : "<span class='text-red-500'>Pending</span>"}</td>
						</tr>
					`;
					claimTable.innerHTML += row;
				});

				const attendanceData = [data.data.totalPresence, data.data.absent];
				console.log(data);
				const ctx1 = document.getElementById("attendanceChart").getContext("2d");
				new Chart(ctx1, {
					type: "doughnut",
					data: {
						labels: ["Present", "Absent"],
						datasets: [{
							data: attendanceData,
							backgroundColor: ["#1b5f89", "#2582b0"], // Green & Red
							borderWidth: 0
						}]
					},
					options: {
						responsive: true,
						maintainAspectRatio: false,
						plugins: {
							legend: { position: "bottom", labels: { font: { size: 12 } } }
						}
					}
				});

				function createPieChart(canvasId, data, backgroundColors) {
				var ctx = document.getElementById(canvasId).getContext('2d');
				new Chart(ctx, {
					type: 'doughnut',
					data: {
						labels: ["Working", "Remaining"],
						datasets: [{
							data: data,
							backgroundColor: backgroundColors,
							borderWidth: 0
						}]
					},
					options: {
						responsive: true,
						maintainAspectRatio: false,
						plugins: {
							legend: { position: "bottom", labels: { font: { size: 12 } } }
						}
					}
				});
			}

			function convertToHours(timeString) {
				const [hours, minutes, seconds] = timeString.split(":").map(Number);
				return hours + minutes / 60 + seconds / 3600;
			}

			const timeString = data.totalWorkingHours;
			const totalHours = convertToHours(timeString);
			const maxHours = 80;
			const remainingHours = (maxHours - totalHours) < 0 ? 0 : (maxHours - totalHours);
			createPieChart("pieChart1", [totalHours, remainingHours], ["#8DA5F3", "#6987EC"]);
			console.log(totalHours + "  " + remainingHours); // This will give you the total hours

				const currentDate = new Date();
				const year = currentDate.getFullYear();
				const month = currentDate.toLocaleString('default', { month: 'long' });
				document.getElementById("monthYear").textContent = `${month} - ${year}`;

				const daysInMonth = new Date(year, currentDate.getMonth() + 1, 0).getDate();
				const tableHeadRow = document.querySelector("#scheduleTable thead tr");
				const tableBody = document.querySelector("#scheduleTable tbody");

				// Add day headers
				for (let day = 1; day <= daysInMonth; day++) {
					let th = document.createElement("th");
					th.textContent = day;
					th.className = "min-w-[64px] max-w-[64px] text-center border border-gray-400 bg-gray-100 text-gray-700 font-semibold shadow-sm";
					tableHeadRow.appendChild(th);
				}

				// Populate project data
				data.projectWorkData.forEach(project => {
					let row = document.createElement("tr");
					row.className = "hover:bg-gray-50 transition duration-200 ease-in-out even:bg-gray-100";

					// Calculate Total Hours for the Month (Rounded)
					let totalMinutes = project.workData.reduce((sum, work) => {
						let [hours, minutes] = work.workDuration.split(":").map(Number);
						return sum + (hours * 60) + minutes;
					}, 0);
					let totalHoursRounded = Math.round(totalMinutes / 60);

					// Project Name & Total Hours Cell (Sticky Left)
					let projectCell = document.createElement("td");
					projectCell.innerHTML = `<span class="text-sm font-semibold">${project.projectName}</span><br>
											 <span class="text-xs text-gray-600">(${totalHoursRounded}H)</span>`;
					projectCell.className = "border border-gray-300 text-center bg-gray-200 font-semibold sticky left-0 w-24 z-10 shadow-md";
					row.appendChild(projectCell);

					// Create empty cells for each day
					for (let day = 1; day <= daysInMonth; day++) {
						let cell = document.createElement("td");
						cell.className = "p-2 border border-gray-300 text-center hover:bg-gray-100 transition-all duration-150 ease-in-out cursor-pointer";
						row.appendChild(cell);
					}

					// Fill work days with color-coded cells
					project.workData.forEach(work => {
						let workDate = new Date(work.startDTime);
						let workDay = workDate.getDate();
						let workCell = row.cells[workDay];

						let workHours = parseInt(work.workDuration.split(":")[0]);

						// Apply colors based on work duration
						let bgColor = "";
						if (workHours < 5) bgColor = "bg-[#82cfc5]";  // Light Green
						else if (workHours < 9) bgColor = "bg-[#39a396]"; // Yellow
						else if (workHours < 12) bgColor = "bg-[#26556D]"; // Orange
						else bgColor = "bg-[#47a89d]";  // Dark Green

						workCell.classList.add(bgColor, "border", "border-gray-400", "cursor-pointer", "shadow-sm");
						workCell.title = `Worked ${work.workDuration}`;
					});

					tableBody.appendChild(row);
				});

			let performanceData = data.performanceData;
			// Extract labels and scores from API response
			const labels = performanceData.map(item => item.performanceType);
			const scores = performanceData.map(item => item.performanceScore);

			// Generate Bar Chart using Chart.js
			const ctx = document.getElementById("performanceChart").getContext("2d");
			new Chart(ctx, {
				type: "bar",
				data: {
					labels: labels,
					datasets: [{
						data: scores,
						backgroundColor: [
						  'rgba(255, 99, 132, 0.2)',
						  'rgba(255, 159, 64, 0.2)',
						  'rgba(255, 205, 86, 0.2)',
						  'rgba(75, 192, 192, 0.2)',
						  'rgba(54, 162, 235, 0.2)',
						  'rgba(153, 102, 255, 0.2)',
						  'rgba(201, 203, 207, 0.2)'
						],
						borderColor: [
						  'rgb(255, 99, 132)',
						  'rgb(255, 159, 64)',
						  'rgb(255, 205, 86)',
						  'rgb(75, 192, 192)',
						  'rgb(54, 162, 235)',
						  'rgb(153, 102, 255)',
						  'rgb(201, 203, 207)'
						],
						borderWidth: 1
					}]
				},
				options: {
					responsive: true,
					maintainAspectRatio: false,
					scales: {
						x: {
							ticks: {
								autoSkip: false, // Prevents skipping labels
								maxRotation: 45, // Rotates labels for better readability
								minRotation: 45
							}
						},
						y: {
							beginAtZero: true,
							max: 150
						}
					},
					plugins: {
						legend: {
							display: false
						}
					}
				}
			});
		});
	});
</script>